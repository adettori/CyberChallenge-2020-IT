#!/usr/bin/env python
# -*- coding: utf-8 -*-

from Crypto.Util.number import *

# Iterative Algorithm (xgcd)
def iterative_egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q,r = b//a,b%a; m,n = x-u*q,y-v*q # use x//y for floor "floor division"
        b,a, x,y, u,v = a,r, u,v, m,n
    return b, x, y

def modinv(a, m):
    g, x, y = iterative_egcd(a, m)
    if g != 1:
        return None
    else:
        return x % m

n = 5582983442520038683
e = 65537
c = [4241158327675851879,4241158327675851879,5354489610922786464,4550738158389426310,4665662406419402733,3736594563003291531,323653105751856648,4703388441175874733,5363019606146104279,3143962585538422543,3488820451902874497,123964607634809096,747696344002322146,296392603807014516,5363019606146104279,747696344002322146,2760000353975742240,5363019606146104279,1022394867374906972,123964607634809096,323653105751856648,4183060581760535428,296392603807014516,5363019606146104279,4703388441175874733,323653105751856648,747696344002322146,3082072561190179323,323653105751856648,324335115885569813,3685077408869721674]

p = 2357345743
q = 2368334581

tot = (p-1)*(q-1)

res = ""

for m in c:
    d = modinv(e, tot)

    m = pow(m, d, n)

    res += long_to_bytes(m).decode()

print(res)


